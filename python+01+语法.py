
# coding: utf-8

# 
# # 注释
#    - 单行注释：以#开头，或#放在代码后面
#    - 多行注释：以'''开头和结束

# In[2]:

print("Hello world")


# # 变量
#  - 变量命名可以包含数字，大小写字母，下划线或更多，但不推荐前三种之外的
#  - 数字不可以开头
#  - 以下划线开头具有特殊含义，不推荐使用
#  - 区分大小写，大小写敏感
#  - 推荐
#      - 使用具有明确意思的英文单词或缩写
#          - 驼峰命名法
#              - 大驼峰
#                  - 名称以单词自动连接，单词首字母大写
#              - 小驼峰
#                  - 与大驼峰基本一样，第一个字母小写
#              - POSIX写法
#                  - 多个单词用下划线连接
#                  - 单词全部小写
#  - 关键字和保留字
#      - def class break for

# In[8]:

#查看关键字的方法
import keyword
#打印出系统全部关键字
print(keyword.kwlist)


# ## 变量声明
#     - var_name  = var_value
#     - var1 = var2 = var3 = var_value
#     - var1,var2,var3 = v1,v2,v3

# In[13]:

age = 1
print (age)


# In[12]:

age1 = age2 = age3 = 18
print(age1)
print(age2)
print(age3)


# # 变量类型
#    - 严格意义上讲，Python只有一个变量类型
#    - 标准数据一共6种
#       - 数字类型Number
#       - 字符串类型str
#       - 列表类型list
#       - 元组tuple
#       - 字典Dictionary
#       - 集合set

# ## 数字类型
#    - 数字类型没有大小限制
#    - 整数
#       - 整数分进制
#         - 二进制
#          - 计算机常用
#          - 表示为0b开头的01代码
#         - 八进制
#          - 不常用
#          - 以0o开头的0-7的数字
#         - 十六进制
#          - 每四个二进制表示一位十六进制数
#          - 以0x开头的0-9，a-f
#         - 十进制
#     - 浮点数
#        - 小数
#          - 0.5
#          - .5
#          - 3.1424
#          - 3.
#        - 科学计数法
#          - 176.89 == 1.7689e2
#          - 0.876 == 1.876e-1
#     - 布尔值
#        - true或false
#        - 布尔值可以直接跟数字运算
#     - 字符串
#        - 可以用单引号，或双引号表示
#        - 可以用三个单引号或三个双引号表示
#        - 可以单双引号交叉使用

# In[1]:

love = 'i love you'
print(love)


# In[6]:

love = '''
i love you
hahhahhh
'''
print (love)


# # 字符串
#    - 转义字符
#    - 格式化‘
#    - 内建函数（后延）
#  ## 转义字符
#    - 用一个特殊的方法把一系列不方便写出的内容表述出来，如回车，换行，退格
#    - 使用反斜杠，一旦出现反斜杠，反斜杠后边一个或多个字符已经不是原来的意思了
#    - 一旦出现反斜杠，要加倍小心
#    - 不同操作系统对换行有不同理解
#      - Windows ：\n
#      - linus : \r\n

# In[14]:

# 如果想打印出let's go
# 1.可以使用嵌套引号，外边使用双引号
# 2.使用转义字符
s = "let 's go"
print(s)
s = 'let\' s go'
print (s)
# \\表示'\'
ss = "C:\\user"
print(ss)
# 回车换行符\r\n
sss = 'ni shi sui a \r\n haha'
print(sss)


# ## 字符串格式化
#    - 把字符串按一定格式打印或填充
#    - 格式化有两种方法
#      - 利用 %
#      - 利用format函数

# In[ ]:

s = "XXX,你好，巴拉巴拉哪啦"


# ### 利用百分号格式化
#    - 在字符串中，% 表示一个特殊的含义，表示格式化
#    - %d：此处应放入一个整数
#    - %s：此处应放入一个字符串

# In[39]:

s = "i love %s"
print(s)
# 打印时将%s直接 打印出来了
s = "i love %s"%"xiaoxiao"
print(s)


# In[23]:

s = 'i am %d years old'
# 留意下面两句的区别
print(s)
print(s%18)


# In[1]:

s = 'i am %s , i am from %s'
#注意下面的错误
print(s)
print(s%(18,"henan"))


# ### 直接用format函数格式化字符串
#    - 推荐使用
#    - 用{}或：代替%，后边用format带参数完成

# In[38]:

s  =' i am {1} years old,i love {0}, i am {1} years old'.format("python",18)
print (s)


# ## None
#    - 表示什么也没有
#    - 如果函数没有返回值，可以返回None
#    - 用来占位置
#    -用来解除变量绑定

# # 表达式
#   - 由一个或几个数字或者变量二和运算符组合成的一行代码
#   - 通常会返回一个结果
# # 运算符
#   - 运算符分类：
#     - 算术运算符
#     - 比较或者关系运算符
#     - 赋值运算符
#     - 位运算
#     - 逻辑运算符
#     - 成员运算符
#     - 身份运算符

# ## 算术运算符
#   - 进行算数运算的符号
#   - Python里没有自增和自减

# In[41]:

# + - 和平时的算数运算符一样
a = 9+3-2
print(a)
# 乘号用*代替
a = 2*3
print(a)
# 除号用/代替
a = 9/4
print(a)
# 注意，Python2.x和Python3.x里，/结果可能不一致


# In[43]:

# 取余运算用%
a = 9%4
print(a)
# //表示取商运算，也叫地板除，得到整数商
a = 9//4
print(a)


# In[44]:

# **表示幂运算
a = 3**3
print(a)


# ## 比较运算符
#   - 对两个变量或值进行比较
#   - 比较的结果是true或false

# In[47]:

# ==，等于号
# 运算顺序：a == 80,b=a
a = 9
b = a ==80
print(b)


# In[ ]:

# != ,不等于
# >=,大于等于
# <=,小于等于
# > , 大于
# < ，小于


# # 赋值运算符

# In[58]:

# = ，赋值
a = 1
c = a = 3
print(a)


# In[59]:

# +=,是缩写
a += 8 # a = a+8
#所有运算符都有缩写
# -=，+=，*=，/=，//=


# # 逻辑运算符
#   - 对布尔值进行计算的运算符
#   - and 逻辑与
#   - or 逻辑或
#   - not 逻辑非
#   - Python中没有异或运算
#   - 运算规则：
#     - true代表1，false代表0
#     - and代表*，or代表+
#     - 则逻辑运算能转换为整数数学运算
#     - 结果如为1就是true，0则是false
#   - 逻辑运算的短路问题
#     - 逻辑运算式，按照运算顺序计算，一旦能够确定最后的值，就不再计算下去，直接返回结果

# # 成员运算符号
#   - 用来检测一个变量是否是另一个变量的成员
#   - in
#   - not in

# In[61]:

# 案例
a = {1,4,6,3}
b = 6
print(b in a)
print(b not in a)


# ## 身份运算
#   - is 用来检测两个变量是否是同一个变量
#     - 语法是var1 is var2
#   - is not 不是同一个变量

# # 运算符的优先级问题
#   - 永远记住，括号具有最高优先级
#   - 优先级表格：待补
#   
